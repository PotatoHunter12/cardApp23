openapi: 3.0.0
info:
  title: Tarok Game API
  version: 1.0.0
  description: API documentation for the Tarok game management system.
servers:
  - url: http://localhost:3000
    description: Local server
paths:
  /api/games:
    get:
      summary: Get all games
      description: Retrieve all games from the database.
      responses:
        '200':
          description: A list of games.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        '500':
          description: Failed to fetch games.
    post:
      summary: Create a new game
      description: Create a new game with the given players.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                players:
                  type: array
                  items:
                    type: string
                  description: List of players.
      responses:
        '201':
          description: Game created successfully.
        '400':
          description: At least 3 players are required.
        '500':
          description: Failed to create game.
  /api/games/find:
    get:
      summary: Find a game by ID
      description: Retrieve a game by its unique ID.
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: The unique ID of the game.
      responses:
        '200':
          description: The requested game.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '500':
          description: Failed to fetch game.
  /api/users/register:
    post:
      summary: Register a new user
      description: Create a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully.
        '400':
          description: Username or email already exists, or required fields are missing.
  /api/users/login:
    post:
      summary: User login
      description: Authenticate a user and return a JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid username or password, or required fields are missing.
  /api/rules:
    get:
      summary: Get all game rules
      description: Retrieve all game rules from the database.
      responses:
        '200':
          description: A list of game rules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
        '500':
          description: Failed to fetch rules.
components:
  schemas:
    Game:
      type: object
      properties:
        id:
          type: string
        players:
          type: array
          items:
            type: string
    Rule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
